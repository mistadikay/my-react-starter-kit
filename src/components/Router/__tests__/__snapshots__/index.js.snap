// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Router 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Router
    history={
        Object {
            "createHref": [Function],
            "createKey": [Function],
            "createLocation": [Function],
            "createPath": [Function],
            "getCurrentLocation": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "listen": [Function],
            "listenBefore": [Function],
            "push": [Function],
            "replace": [Function],
            "transitionTo": [Function],
          }
    }
    onUpdate={[Function]}
    render={[Function]}
>
    <Route
        component={[Function]}
        name="ADMIN"
        path="/"
    >
        <IndexRoute
            component={[Function]}
        />
        <Route
            component={[Function]}
        >
            <Route
                component={[Function]}
                path="editor"
            />
            <Route
                component={[Function]}
                path="*"
            />
        </Route>
    </Route>
</Router>,
  "nodes": Array [
    <Router
      history={
            Object {
                  "createHref": [Function],
                  "createKey": [Function],
                  "createLocation": [Function],
                  "createPath": [Function],
                  "getCurrentLocation": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "listen": [Function],
                  "listenBefore": [Function],
                  "push": [Function],
                  "replace": [Function],
                  "transitionTo": [Function],
                }
      }
      onUpdate={[Function]}
      render={[Function]}
>
      <Route
            component={[Function]}
            name="ADMIN"
            path="/"
      >
            <IndexRoute
                  component={[Function]}
            />
            <Route
                  component={[Function]}
            >
                  <Route
                        component={[Function]}
                        path="editor"
                  />
                  <Route
                        component={[Function]}
                        path="*"
                  />
            </Route>
      </Route>
</Router>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <_class
        onUpdate={[Function]}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": _class {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "onUpdate": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Router
          history={
                    Object {
                              "createHref": [Function],
                              "createKey": [Function],
                              "createLocation": [Function],
                              "createPath": [Function],
                              "getCurrentLocation": [Function],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "listen": [Function],
                              "listenBefore": [Function],
                              "push": [Function],
                              "replace": [Function],
                              "transitionTo": [Function],
                            }
          }
          onUpdate={[Function]}
          render={[Function]}
>
          <Route
                    component={[Function]}
                    name="ADMIN"
                    path="/"
          >
                    <IndexRoute
                              component={[Function]}
                    />
                    <Route
                              component={[Function]}
                    >
                              <Route
                                        component={[Function]}
                                        path="editor"
                              />
                              <Route
                                        component={[Function]}
                                        path="*"
                              />
                    </Route>
          </Route>
</Router>,
        "_debugID": 2,
        "_renderedOutput": <Router
          history={
                    Object {
                              "createHref": [Function],
                              "createKey": [Function],
                              "createLocation": [Function],
                              "createPath": [Function],
                              "getCurrentLocation": [Function],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "listen": [Function],
                              "listenBefore": [Function],
                              "push": [Function],
                              "replace": [Function],
                              "transitionTo": [Function],
                            }
          }
          onUpdate={[Function]}
          render={[Function]}
>
          <Route
                    component={[Function]}
                    name="ADMIN"
                    path="/"
          >
                    <IndexRoute
                              component={[Function]}
                    />
                    <Route
                              component={[Function]}
                    >
                              <Route
                                        component={[Function]}
                                        path="editor"
                              />
                              <Route
                                        component={[Function]}
                                        path="*"
                              />
                    </Route>
          </Route>
</Router>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <_class
    onUpdate={[Function]}
/>,
}
`;
